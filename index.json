{
  "gateway/getting-started.html": {
    "href": "gateway/getting-started.html",
    "title": "Getting Started | docs.devolutions.net",
    "keywords": "Getting Started Prerequisites Docker Installation Install the DevolutionsGateway PowerShell module: Install-Module -Name DevolutionsGateway Import-Module DevolutionsGateway Configuration Create the Devolutions Gateway configuration directory if it doesn't already exists: PS > Import-Module DevolutionsGateway PS > Get-DGatewayPath C:\\ProgramData\\Devolutions\\Gateway PS > New-Item -Path $(Get-DGatewayPath) -ItemType 'Directory' -Force Move into the configuration directory manually, or using the Enter-DGatewayConfig command: PS > Enter-DGatewayConfig -ChangeDirectory PS C:\\ProgramData\\Devolutions\\Gateway> The Enter-DGatewayConfig command sets the DGATEWAY_CONFIG_PATH environment variable that affects all commands accepting the -ConfigPath parameter. For this guide, we will be using the standard configuration directory. Gateway Hostname By default, the Devolutions Gateway will use the default computer name ( $Env:ComputerName ) as its hostname when responding to queries. For testing on the local network, this is probably not an issue, but for external access you will need to change it to the external DNS name you intend to use: Set-DGatewayHostname 'jet.buzzword.marketing' Gateway Listeners Before launching Devolutions Gateway for the first time, it is important to configure its protocol listeners with the Set-DGatewayListeners command: Set-DGatewayListeners @( $(New-DGatewayListener 'http://*:7171' 'http://*:7171'), $(New-DGatewayListener 'tcp://*:8181' 'tcp://*:8181') ) Run Get-DGatewayListeners to see the list of configured listeners: PS > Get-DGatewayListeners InternalUrl ExternalUrl ----------- ----------- http://*:7171 http://*:7171 tcp://*:8181 tcp://*:8181 Each listener object is composed of an InternalUrl and ExternalUrl member. The internal URL is the local protocol and port on which to listen, the external URL is the external protocol and port used to expose the service externally. Use * as the \"host\" in both URLs to use an appropriate default value, unless it needs to be set explicitly to something else. The default host for the external URL is the configured gateway hostname. When using Devolutions Gateway on the local network, both URLs will generally be identical, so don't bother about it too much for now, we'll reconfigure them later for proper external access. Initial Launch Once the initial configuration is completed, the gateway can be started with the Start-DGateway command. Use the -Verbose parameter to print the full docker commands and use them for reference if you wish to launch the container directly without the DevolutionsGateway module. PS > Start-DGateway docker pull devolutions/devolutions-gateway:0.13.0-servercore-ltsc2019 Starting devolutions-gateway devolutions-gateway successfully started Make sure that the HTTP listener health check responds \"200 OK\": PS > $DGatewayUrl = 'http://localhost:7171' PS > Invoke-WebRequest \"$DGatewayUrl/health\" StatusCode : 200 StatusDescription : OK Content : {74, 101, 116, 32...} RawContent : HTTP/1.1 200 OK Content-Length: 59 Date: Thu, 22 Oct 2020 19:02:07 GMT Jet instance \"jet.buzzword.marketing\" is alive and healthy. Headers : {[Content-Length, 59], [Date, Thu, 22 Oct 2020 19:02:07 GMT]} RawContentLength : 59 Certificate Configuration Now that Devolutions Gateway was launched once with success, we can reconfigure it for proper HTTPS access. Before going any further, stop Devolutions Gateway if it is currently running: Stop-DGateway A valid certificate from a known authority like letsencrypt can be obtained in various ways. The Posh-ACME PowerShell module is an excellent module with plugins for most DNS providers. For the purpose of this guide, we use a wildcard certificate for \"*.buzzword.marketing\" as opposed to \"jet.buzzword.marketing\". Using a wildcard certificate has many practical advantages, but it only becomes mandatory if you intend to deploy multiple instances of Devolutions Gateway for high availability. $CertPath = \"~\\certs\\!.buzzword.marketing\" Import-DGatewayCertificate -CertificateFile $(Join-Path $CertPath 'fullchain.pfx') -Password 'poshacme' Let's reconfigure our protocol listeners, using 'https' rather than 'http' this time: Set-DGatewayListeners @( $(New-DGatewayListener 'https://*:7171' 'https://*:7171'), $(New-DGatewayListener 'tcp://*:8181' 'tcp://*:8181') ) the 'tcp' listener remains unchanged for now, but it may use the configured certificate for certain protocols. Do you recall the Set-DGatewayHostname command? Let's confirm that the configured hostname matches the imported certificate: PS > Get-DGatewayHostname jet.buzzword.marketing Our certificate valid for \"*.buzzword.marketing\" matches the \"jet.buzzword.marketing\" hostname, so there won't be a certificate name mismatch. External Exposure The next step is to expose Devolutions Gateway externally on that domain name. If you have an Azure VM directly exposed to the internet, add the required inbound firewall exception. In other environments, this is done with a simple port forward in your router. If you use a reverse proxy with TLS offloading, we will cover the differences later. For this guide, I have configured an Azure VM directly exposed on the internet with a public IP. The \"buzzword.marketing\" domain was configured with an A record for 'jet' pointing to the Azure VM public IP. With this in mind, let's explain a little more the internal and external URLs: InternalUrl : 'https://*:7171' expands to 'https://0.0.0.0:7171', which means \"listen locally in HTTPS on all network interfaces, on port 7171\". ExternalUrl : 'https://*:7171' expands to \"https://jet.buzzword.marketing:7171\" which means \"accessed externally in HTTPS, on 'jet.buzzword.marketing', port 7171\" In the end, this means traffic will flow in through \"https://jet.buzzword.marketing:7171\" and reach \"https://internal-hostname:7171\" on the internal network. Validate the configuration, making sure that everything matches, then start Devolutions Gateway again: Start-DGateway Cross your fingers, then try the Devolutions Gateway health check: Invoke-WebRequest \"https://$(Get-DGatewayHostname):7171/health\" StatusCode : 200 StatusDescription : OK Content : {74, 101, 116, 32...} RawContent : HTTP/1.1 200 OK Content-Length: 59 Date: Thu, 22 Oct 2020 20:39:58 GMT Jet instance \"jet.buzzword.marketing\" is alive and healthy. Headers : {[Content-Length, 59], [Date, Thu, 22 Oct 2020 20:39:58 GMT]} RawContentLength : 59 If the above command worked, then you have successfully configured Devolutions Gateway for external access with a valid certificate, congratulations! If not, review the previous steps to find what you missed. Reverse Proxy Instead of configuring Devolutions Gateway to handle HTTPS with a certificate, a reverse proxy can be put in front to handle and offload TLS entirely. This approach is preferred if multiple web applications need to be exposed through the same entry point. Reverse proxies like IIS (with ARR) , traefik, nginx and haproxy also come with advanced configuration options and better ways to handle certificate management. When using a wildcard certificate, it becomes easy to create an HTTPS listener bound to a specific domain and forward all traffic coming through this domain to Devolutions Gateway specifically. This technique is often used to make \"virtual hosts\" on the same TCP port (especially 443, the standard one) using TLS Server Name Indication (SNI). Assuming we have configured our reverse proxy to forward traffic coming in through \"https://jet.buzzword.marketing\" to our internal host where Devolutions Gateway is listening in HTTP on port 7171, the new configuration should look like this: Set-DGatewayListeners @( $(New-DGatewayListener 'http://*:7171' 'https://*'), $(New-DGatewayListener 'tcp://*:8181' 'tcp://*:8181') ) Notice that in this case, the internal URL is set to 'http', because it receives traffic in HTTP from the reverse proxy. The reverse proxy handles HTTPS, offloads TLS, then forwards the traffic in HTTP to Devolutions Gateway. Because of this, the network path taken between the reverse proxy and the target host on the local network should be restricted. You can also choose to offload TLS, yet forward traffic over HTTPS on the internal network with a second TLS connection, but this is definitely not a requirement. This type of configuration is generally more difficult to implement and comes with an additional performance cost. Before going that route, consider not doing TLS offloading in the first place, and letting Devolutions Gateway handle it instead with better performance. Last but not least, the TCP listener also needs a corresponding port forwarding configuration. In this case, TCP/8181 on jet.buzzword.marketing needs to be forward to TCP/8181 on the internal host where Devolutions Gateway is running. Don't forget to double check that the firewall has the proper inbound TCP port exception. Wayk Bastion If you use Wayk Bastion, you can now reconfigure it to point to your Devolutions Gateway: Set-WaykBastionConfig -JetExternal $true -JetRelayUrl \"https://jet.buzzword.marketing:7171\" Restart-WaykBastion Automatic Startup If you launched Devolutions Gateway in a container, you don't need to do anything, as the default Docker restart policy is set to 'always'. This can be changed with the Set-DGatewayConfig command: Set-DGatewayConfig -DockerRestartPolicy \"on-failure\" Unlike \"always\", the \"on-failure\" restart policy only restarts the container if it fails with a non-zero exit code."
  },
  "gateway/index.html": {
    "href": "gateway/index.html",
    "title": "Devolutions Gateway | docs.devolutions.net",
    "keywords": "Devolutions Gateway Devolutions Gateway is the relay server used in Wayk Bastion for peer-to-peer connectivity between Wayk Client and Wayk Agent when a direct connection is not possible."
  },
  "index.html": {
    "href": "index.html",
    "title": "docs.devolutions.net | docs.devolutions.net",
    "keywords": "docs.devolutions.net Welcome to the Devolutions documentation! Products Please choose your product from the list: Contributing This documentation is open source and open for contributions! Follow instructions from our devolutions-docs GitHub repository to get started."
  },
  "wayk/agent/diagnostics.html": {
    "href": "wayk/agent/diagnostics.html",
    "title": "Wayk Agent Diagnostics | docs.devolutions.net",
    "keywords": "Wayk Agent Diagnostics Enable Diagnostic Logging From the Wayk Agent menu, click Help then check \"Diagnostic Logging\": Accept the prompt to restart the application, or manually quit and relaunch Wayk Agent. Export Diagnostic Logs From the Wayk Agent menu, click Help then Export Diagnostics : Select a directory (such as \"My Documents\"), then click OK. You should now find a .zip file containing the Wayk Agent log files: This .zip file can then be sent to our support team to help us diagnose issues."
  },
  "wayk/agent/index.html": {
    "href": "wayk/agent/index.html",
    "title": "Wayk Agent Overview | docs.devolutions.net",
    "keywords": "Wayk Agent Overview Wayk Agent is the program meant to allow remote control to a machine managed by Wayk Bastion. The system service from Wayk Agent maintains a persistent link with Wayk Bastion to report its state and expose remote desktop connectivity to technicians using Wayk Client. Wayk Agent requires no separate license and should be deployed on all machines meant to be managed by Wayk Bastion."
  },
  "wayk/agent/known-issues.html": {
    "href": "wayk/agent/known-issues.html",
    "title": "Wayk Agent Known Issues | docs.devolutions.net",
    "keywords": "Wayk Agent Known Issues RDP Black Screen If you first connect with RDP and then connect with Wayk to the same Windows user session, minimizing the RDP client window can result in a black screen in Wayk. This is because the RDP client sends a message that causes all remote graphics rendering to stop. Virtual Machine Black Screen With VirtualBox, 3D acceleration breaks screen sharing because the 3D rendering occurs on the virtual machine host, making it impossible to capture from the guest. Therefore, 3D acceleration must be disabled. With Parallels, 3D acceleration breaks screen sharing. The reason and the solution are the same as for VirtualBox. Linux Black Screen Ubuntu 18.04 and later defaults to Wayland instead of xorg-server (X11), but display capturing is currently not possible with Wayland, resulting in a black screen. To work around the problem, the default should be changed to xorg-server. You can follow instructions from this blog post ."
  },
  "wayk/agent/requirements.html": {
    "href": "wayk/agent/requirements.html",
    "title": "Wayk Agent Requirements | docs.devolutions.net",
    "keywords": "Wayk Agent Requirements System Requirements Windows 7, 8, 8.1, 10 Windows Server 2012, 2016, 2019 macOS Mavericks (10.9) or later Ubuntu Linux 16.04 or later 1 GHz processor 512 MB RAM 1024x768 screen resolution 25 MB storage capacity"
  },
  "wayk/bastion/database-management.html": {
    "href": "wayk/bastion/database-management.html",
    "title": "Database Management | docs.devolutions.net",
    "keywords": "Database Management Aside from the Wayk Bastion configuration files, all Wayk Bastion data is stored inside a MongoDB database . If you do not specify a database, a simple MongoDB container will be launched with a docker volume attached to it. While this is fine for a lot of use cases, using a single MongoDB container instance is not suitable for high availability scenarios. Note If you need help installing and configuring a MongoDB server, use this guide instead . External Database To point Wayk Bastion to an existing MongoDB server, you need to configure a database connection string, and set MongoDB as external to avoid launching a MongoDB container instance: Set-WaykBastionConfig -MongoExternal $true -MongoUrl 'mongodb://mongo-server:27017' Database Backup MongoDB database backups can be done using the mongodump command-line tool . For simplicity, the Backup-WaykBastionData command can be used to streamline the process: Backup-WaykBastionData -BackupPath .\\den-backup.tgz -Verbose The Backup-WaykBastionData is only usable with a non-external MongoDB database. You can add the -Verbose parameter to show the docker commands used to call mongodump inside a container for reference. Database Restore A MongoDB database can be restored from a backup using the mongorestore command-line tool . For obvious reasons, you should be careful about restoring a database, as the operation will overwrite the current data and replace it with the one from the backup. Just like Backup-WaykBastionData , Restore-WaykBastionData should only be used with a non-external MongoDB database. A proper restore involves stopping Wayk Bastion, restoring data from the backup file, then restarting Wayk Bastion. Since Stop-WaykBastion stops the database container, Restore-WaykBastionData will automatically start it for the restore operation. PS > Stop-WaykBastion PS > Restore-WaykBastionData -BackupPath \".\\den-backup.tgz\" -Verbose PS > Restart-WaykBastion Changing database It is possible to change databases without deleting the current one, by changing which docker volume is attached to the den-mongo container. The default docker volume name is den-mongodata , but you can tell Wayk Bastion to use a different one: PS > Stop-WaykBastion PS > Set-WaykBastionConfig -MongoVolume 'den-testdata' PS > Start-WaykBastion After starting Wayk Bastion, you should be able to see two docker volumes: PS > docker volume ls DRIVER VOLUME NAME local den-mongodata local den-testdata Since den-testdata is a new empty docker volume, Wayk Bastion will be the same as a fresh installation. This can be useful for safe experimentation in a temporary database without touching the \"good\" one. If you want to revert back to the original database, simply change the docker volume again: PS > Stop-WaykBastion PS > Set-WaykBastionConfig -MongoVolume 'den-mongodata' PS > Start-WaykBastion Where den-mongodata is the default docker volume name. Deleting database If you want to start fresh and delete the MongoDB database entirely (use with caution!), here are the steps: PS > Stop-WaykBastion PS > docker rm den-mongo PS > docker volume rm den-mongodata The above commands stop all containers, delete the den-mongo container currently associated with the den-mongodata volume, and then proceed to delete the docker volume containing the MongoDB database files."
  },
  "wayk/bastion/deployment-automation.html": {
    "href": "wayk/bastion/deployment-automation.html",
    "title": "Deployment Automation | docs.devolutions.net",
    "keywords": "Deployment Automation Once you have a Wayk Bastion server ready, the next step is to find a way to automate the process of installing, registering and configuring Wayk Now on all of the machines you need to manage. This process is important in order to reduce the total number of manual operations that one needs to perform, especially if you have a large number of machines. Installation Wayk Now should be installed using the .msi installer on Windows, or the .pkg installer on macOS. You cannot use the standalone executable on Windows or the .dmg package on macOS for unattended access, as they are only meant for temporary access. As such, Wayk Now is not an agentless product because you need to install the Wayk Now agent. If you already have a tool that can push the installer on your machines and install it this way, you can download the packages from our CDN and do the installation this way. If you do not have a way of pushing the installer on the remote machines but can get them to execute scripts, such as logon scripts pushed through GPO in a Windows domain, we recommend automating the downloading of the package from our CDN. The downloading and installing of the Wayk Now package is already automated in our WaykNow PowerShell cmdlet available on PSGallery . This cmdlet is compatible with PowerShell 7 (and Windows PowerShell 5.1) and works on all operating systems (Windows, macOS, Linux). If you would rather make your own script to do the same thing without using the cmdlet, simply use the PowerShell code available on GitHub as reference to roll your own. Enrollment The enrollment token is used to authorize machines to join your Wayk Bastion and automatically register for unattended access. This token is meant to be easily embedded within scripts, such that all you need is to run a command to get Wayk Now to register with a specific Wayk Bastion initially. To create a new enrollment token, go in \"Servers → Machine Registration\", then click the \"Generate\". You can set a validity period for the token, or you can also disable token expiration by setting it to Never . If you want to keep using a token after it has expired, there is always the possibility of renewing it. To simplify group management, you can also select in which group machines using this token will be put. If you want to automatically enroll different machines in different groups, simply create more than one token and use them appropriately. Click \"Generate\" to create the enrollment token with the desired options. You should now see the enrollment token in the list. For the moment, the only information which you need is the token id (f762156f-9470-4dcc-9ba3-157437e465ce), which can be easily embedded in an automation script. Enrollment Using Token Id After installing Wayk Now on a machine, the wayk-now command-line becomes available for post-installation automation. To automatically enroll Wayk Now to your private Wayk Bastion, call the wayk-now enroll command with the --token-id and --den-url parameters: wayk-now enroll --token-id f762156f-9470-4dcc-9ba3-157437e465ce --den-url https://den.contoso.com If the command is successful, Wayk Now will be configured to point to your Wayk Bastion, and will be automatically registered for unattended access. It should now be visible in the list of registered machines in Wayk Bastion: Enrollment Using Token Data While the token id is relatively short and easy to embed into a script, it has one disadvantage: it doesn’t contain information about the Wayk Bastion it belongs to. This is why the --den-url parameter is required when using the token id for automated enrollment. The alternative is to extract and use the full token data, such that the only thing you need is the token. However, the token data is usually much longer and usually needs to be embedded in a file to be passed to Wayk Now. To extract the enrollment token data, click on the vertical ellipsis (⋮) button besides the enrollment token, and select \"View full token\": The full token data will be presented for you to copy to the clipboard. This long string is a valid JSON Web Token (JWT), and its contents can be inspected by pasting it in the jwt.io debugger tool . For automated enrollment, save this token to a file on disk (such as C:\\token.txt ) and then use the wayk-now enroll command: wayk-now enroll --token-file C:\\token.txt Alternatively, you can also pass the full enrollment token data at the command-line, even if it is quite long: wayk-now enroll --token-data eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJodHRwczovL2Rlbi5idXp6d29yZC5tYXJrZXRpbmciLCJqdGkiOiJmNzYyMTU2Zi05NDcwLTRkY2MtOWJhMy0xNTc0MzdlNDY1Y2UiLCJpYXQiOjE1OTcwODI3NjMsImV4cCI6MTU5OTY3NDc2M30.hWaKDCHXuCHd6dXNwkvdCVKSY3eZXN7qWKKPkeSFdT4NkhT8H-p_GNXxpXuE-OTfOFislg9F1eacV5p86ef3qukgWp_qw_LJ6O8kBcq1AQccSFM7nkyB5yvXnAFbvuOJyUnGxmGG0eO9b3ihA3RVZdQFaQrn7uDyQSAnPssq1M0tli9ywcXki__IzAFI7ZXDPZPKwEw_xedADNSNfL7Gb_pnFnTsyuSOLynq7T8TPdR0G5YSG6palnRjWKPlZeEfYhYq6qu_zDSDLDLgfLFxjSxVHUGd62cSC3r1ne5Viu7GZKZIQJR2T1ljWPBfttqYjrHZMTe6JiU3-E7VUVYLVQ However, we recommend using a file to pass the enrollment token data whenever possible, as simple copy/paste errors are easy to make with large strings like this. Configuration Once Wayk Now is installed and registered with Wayk Bastion, you may want to change configuration settings. This can be done through the wayk-now config command, documented here . These commands can be appended to your custom deployment script that installs the package, performs automated enrollment and finishes by modifying the configuration."
  },
  "wayk/bastion/docker-installation.html": {
    "href": "wayk/bastion/docker-installation.html",
    "title": "Docker Installation | docs.devolutions.net",
    "keywords": "Docker Installation Wayk Bastion is a product composed of multiple services shipped as Docker containers for Windows and Linux, which is why you need a working Docker environment to get started. We recommend choosing one of the two following combinations: Windows Server 2019 + Windows Containers Ubuntu Linux 18.04 LTS + Linux Containers Other versions of Windows may work, but we do not support them officially. We recommend Ubuntu Linux because it is was we use, but other Linux distributions such as Red Hat Enterprise Linux (RHEL) should work the same. Windows When in Rome, do as the Romans do: use Windows containers on Windows. Real Windows containers are best supported in Windows Server 2019, which is why we make it a requirement for Windows. Other versions of Windows have important Docker limitations and are therefore not officially supported. Warning Many antivirus software vendors do not provide suitable Docker for Windows exclusions by default, breaking the Docker engine, severely degrading container performance, and even corrupting database files. Windows Server 2019 The official way of running Wayk Bastion on Windows Server is to use the built-in support for Windows containers instead of installing Docker Desktop for Windows and running Linux containers. If you intend to run Wayk Bastion inside a virtual machine, using Windows Server and Windows containers is the recommended approach because it does not require Docker Desktop for Windows and a Hyper-V virtual machine. Install or update NuGet and PowerShellGet: $ Install-PackageProvider -Name NuGet -Force $ Install-Module -Name PowerShellGet -Force Check if the Windows Server Containers feature is installed, then install it: $ Get-WindowsFeature | Where-Object { $_.Name -Like 'Containers' } $ Install-WindowsFeature -Name Containers -Restart Install the Microsoft Docker provider: $ Install-Module -Name DockerMsftProvider -Force $ Install-Package -Name docker -ProviderName DockerMsftProvider -Force Start the docker service if it is not currently running: $ Get-Service | Where-Object { $_.Name -Like 'docker' } $ Start-Service -Name docker Windows 10 On Windows 10, the recommended option is to use Docker Desktop for Windows . This version of Docker requires Hyper-V for Linux container support, making it suitable for testing on a physical machine, but not so much for a virtual machine because of limited support of Docker Desktop for Windows in virtualized environments. If you want to try Wayk Bastion inside a virtual machine, use Windows Server 2019 instead with Windows containers. One important thing to know about Docker for Windows is that you need to switch to Windows containers instead of the default (Linux containers). Trying to launch Windows containers when Linux containers are enabled will result in a \"no matching manifest for windows/amd64\" error. For bind mount support with Linux containers on Windows, you need to go in the Docker settings and select the required drives from the \"Shared Drives\" section . Linux On Linux, follow one of the distribution-specific getting started guides , then do not forget to add your user to the docker group after installation. To confirm that Docker is up and running, use the docker run hello-world command. If you don’t see the \"Hello from Docker!\" message, something is wrong with your Docker installation. macOS On macOS, follow the official Docker Desktop getting started guide . While macOS is not an officially supported platform for Wayk Bastion, it is suitable for testing. Antivirus Warning Many antivirus software vendors do not provide suitable Docker for Windows exclusions by default, breaking the Docker engine, severely degrading container performance, and even corrupting database files. Okay, the above warning may come off as scary, but it is not as bad as it sounds. Containers are by nature running isolated from the host, something much better than traditional software that runs directly on the host. File Scan Exclusion Following the recommendation made by Docker , add %ProgramData%\\Docker to the list of file scan exclusions. This will prevent your antivirus from scanning container images and container volumes. These are large files that the antivirus should not lock, modify or delete in any case anyway. Because the antivirus locks the files as it scans them, Docker is much slower at launching the containers that are composed of a layered file system (very large for Windows containers). As for database files, similar exclusions are commonly required when running database software on the host, so this is just the equivalent for containers. Symantec Endpoint Protection (SEP) The \"Application and Device Control (ADC) component of Symantec Endpoint Protection (SEP) is known to break the Docker engine and should be removed entirely. Additional exclusions are also required and documented here . Finally, you can refer to the following blog post for further guidance. Sophos Endpoint Protection Sophos Endpoint Protection should work fine as long as %ProgramData%\\Docker is added to the file scan exclusion list. Surprisingly, Sophos does not seem to document a recommended Docker for Windows exclusion procedure. Cisco Advanced Malware Protection (AMP) We've had one instance where Cisco AMP broke Docker for a customer, and the problem went away after disabling it entirely. If you use Cisco AMP and figure out how to make it work with Docker, please let us know, as we couldn't find a clear answer on the Cisco website. Other Antivirus Software If you don't see instructions specific to your antivirus software and run into issues, try disabling it temporarily, and then search for exclusion recommendations from your antivirus vendor. It is hard to test for all antivirus software out there, so we welcome contributions to keep the list up to date."
  },
  "wayk/bastion/getting-started.html": {
    "href": "wayk/bastion/getting-started.html",
    "title": "Getting Started Guides | docs.devolutions.net",
    "keywords": "Getting Started Guides Make sure you have all software prerequisites then read one of our getting started guides: getting started guide (Argo tunnel) getting started guide (Azure VM) . getting started guide (ACME/letsencrypt) . relay deployment guide . IIS deployment guide ."
  },
  "wayk/bastion/getting-started-acme.html": {
    "href": "wayk/bastion/getting-started-acme.html",
    "title": "Getting Started Guide (ACME/letsencrypt) | docs.devolutions.net",
    "keywords": "Getting Started Guide (ACME/letsencrypt) This getting started shows how to obtain free TLS certificates from letsencrypt using Posh-ACME and the Azure DNS plugin . Since letsencrypt certificates are valid only for 90 days, the process should be automated, but we will cover a simple manual procedure first. If you have never used letsencrypt before, it is a good way to get started. Prerequisites For this getting started guide, we will be using: A domain name (buzzword.marketing) An Azure DNS zone for our domain The Azure and Posh-ACME PowerShell modules Step 1: Obtain a domain If you don’t have a domain available for testing, you can buy one from your favorite registrar. In our case, we have bought the \"buzzword.marketing\" domain from namecheap . Before going further, make sure you have access to the account used to configure DNS servers for the domain name you intend to use. Step 2: Create Azure DNS zone Refer to the following Microsoft articles to create an Azure DNS zone: Quickstart: Create an Azure DNS zone and record using the Azure portal Tutorial: Host your domain in Azure DNS First, create an Azure DNS zone, and then obtain the list of the Microsoft name servers associated with it. These are the custom DNS servers that need to be configured with your domain registrar. From the above screenshot, the custom name servers are: ns1-09.azure-dns.com ns2-09.azure-dns.net ns3-09.azure-dns.org ns4-09.azure-dns.info These custom name servers need to be configured with your domain registrar in order to manage the domain from the Azure DNS zone. The procedure is different for each registrar, but here is procedure for using custom DNS servers with namecheap . Once your domain is configured to be managed through the Azure DNS zone, you no longer need access to the registrar account aside from renewing your domain registration. All DNS records can be now be managed from Azure, which is perfect for performing the ACME DNS challenge required to prove ownership of a given domain with letsencrypt. Step 3: Request a certificate This is where it can get tricky if you wish to automate things correctly, but there exists a rather a quick path to requesting certificates without too much trouble. Open a PowerShell prompt, then install and import the Az and Posh-ACME PowerShell modules: > Install-Module -Name Az > Install-Module -Name Posh-ACME > Import-Module Az > Import-Module Posh-ACME Az is the Azure PowerShell module , and Posh-ACME is a PowerShell module that supports the ACME protocol used by letsencrypt along with a rich set of plugins for integrating with DNS providers. In our case, we will be using the Azure DNS plugin because our domain is managed with an Azure DNS zone. Here is the plan: we will login to the Azure Portal using the Azure PowerShell module, grab the access token from the Az context and pass it to Posh-ACME such that it can proceed with the ACME DNS challenge. Since the access token expires every two minutes, you may have to login again if you get an expired token error. However, this procedure skips the trouble of configuring a separate account suitable for automation. From the PowerShell prompt, call Connect-AzAccount . If you have more than one subscriptions, you should specify which one you wish to connect to, otherwise you will get the default subscription associated with your account: PS /home/mamoreau> Connect-AzAccount -Subscription 'wayk staging' Account SubscriptionName TenantId Environment ------- ---------------- -------- ----------- mamoreau@devolutions.net Wayk Staging cf76f217-2059-4091-bb00-878429f5cc64 AzureCloud Follow the instructions given by the Connect-AzAccount command. You can now go back to your PowerShell prompt and do everything that can be done through the Azure Portal, but with PowerShell instead! Copy and paste the following code snippet to grab the access token and prepare the parameters to be passed to the Azure DNS plugin: $az = Get-AzContext; $token = Get-AzAccessToken $AzParams = @{ AZSubscriptionId=$az.Subscription.Id; AZAccessToken=$token.Token; } Set the $CommonName variable to the domain for which you wish to request a certificate. In our code, we will be requesting a certificate for test.buzzword.marketing : $CommonName = \"test.buzzword.marketing\" If this is the first time using letsencrypt, you will have to accept the terms of use. Run the following command once: New-PACertificate $CommonName -AcceptTOS -Contact admin@example.com The contact email address is optional, and is used to receive expiration notifications. Proceed immediately to requesting your certificate: $Certificate = New-PACertificate $CommonName -DnsPlugin Azure -PluginArgs $AzParams $CertPath = Split-Path -Path $Certificate.PfxFile -Parent If all went well, the New-PACertificate command should take about a minute to complete, with a \"Waiting for DNS to propagate\" message. If you get an error saying that the access token is expired, login again and run the token-grabbing code snippet again. The $CertPath variable now point to the local directory where all the certificate files produced by Posh-ACME are stored. The default password (when none has been specified) is poshacme . The file of interest we will be using is fullchain.pfx because it contains both the full chain and the private key, but the certificate is also available in .pem and .key format. That’s it, you now have a valid TLS certificate emitted by letsencrypt that you can use for testing! You can learn about more advanced options available from the Posh-ACME tutorial ."
  },
  "wayk/bastion/getting-started-argo.html": {
    "href": "wayk/bastion/getting-started-argo.html",
    "title": "Getting Started Guide (Argo Tunnel) | docs.devolutions.net",
    "keywords": "Getting Started Guide (Argo Tunnel) This getting started guide provides instructions for setting up a one-time Wayk Bastion demo environment using a free Cloudflare Argo tunnel for external access. Step 1: Launch Wayk Bastion for localhost access only Open a PowerShell terminal and load the WaykDen module. Create a new directory for your Wayk Bastion configuration files and move into it. Create a new configuration using your external URL and \"windjammer.local\" as the realm, then start Wayk Bastion: $ Import-Module WaykDen $ mkdir ~/den-test $ cd ~/den-test $ New-WaykDenConfig -Realm windjammer.local -ExternalUrl http://localhost:4000 $ Start-WaykDen The realm is a domain name for your Wayk Bastion, very similar to a Windows Active Directory domain name, but it does not need to be a valid DNS domain name. In this case, we use windjammer.local for a fictional company called \"Windjammer\". Do not open http://localhost:4000 in a browser yet. We will access it through the Argo tunnel instead. We just need Wayk Bastion to be running first for the Argo tunnel to be opened. Leave this terminal open: we will come back to it later. Step 2: Create free Argo tunnel for external access Download the cloudflared executable for your platform to a known path Open a new terminal and move to the directory where the cloudflared executable is located. Then, confirm that the tool can be found at command-line: $ cloudflared --version cloudflared version 2019.12.0 (built 2019-12-19-2246 UTC) Create a free Argo tunnel pointing to \"http://localhost:4000\" and wait for it to become ready: $ cloudflared tunnel --url http://localhost:4000 Search within the terminal output for your trycloudflare.com generated URL. It should look like this: INFO[0002] +--------------------------------------------------------+ connectionID=0 INFO[0002] | Your free tunnel has started! Visit it: | connectionID=0 INFO[0002] | https://wayk-den-demo-test.trycloudflare.com | connectionID=0 INFO[0002] +--------------------------------------------------------+ connectionID=0 This terminal needs to remain open to keep the Argo tunnel active. The free tunnel URL changes every time and is composed of 4 random words, but this is fine as we are using this for a one-time Wayk Bastion demo environment. You will get a different URL every time you create a free Argo tunnel, unless you register for the paid service . For the purpose of this guide, the external URL is \"https://wayk-den-demo-test.trycloudflare.com\", but you will need to replace it with the one you obtained when following these instructions. Step 3: Launch Wayk Bastion using the Argo tunnel external URL Now that we have launched the Argo tunnel, HTTP requests to \"https://wayk-den-demo-test.trycloudflare.com\" will be automatically redirected to \"http://localhost:4000\", with SSL/TLS certificates automatically handled by Cloudflare. Go back to the PowerShell terminal where Wayk Bastion was started. Stop Wayk Bastion, modify the external URL and start Wayk Bastion again. $ Stop-WaykDen $ Set-WaykDenConfig -ExternalUrl https://wayk-den-demo-test.trycloudflare.com $ Start-WaykDen That’s it! You should now be able to open the external URL in a browser and see a login page. Step 4: Complete initial configuration from Wayk Bastion Web UI Now that Wayk Bastion is running and available externally through an Argo tunnel, you can proceed to creating a first admin user. Open your external URL (\"https://wayk-den-demo-test.trycloudflare.com\") in a browser. In a fresh installation, you can log in using the \"wayk-admin\" username and \"wayk-admin\" password, after which you will be asked to create your first admin user. For the purpose of this guide, we will create the user \"admin\" with the password \"admin123!\". All passwords for test purposes will be the same as the username with \"123!\" appended to it. If you do not have a fresh database and wish to reset it, you can stop the Wayk Bastion, run \"docker rm den-mongo\" and \"den volume rm den-mongodata\" and start the Wayk Bastion. Once logged in, click Users from the left navigation menu: In the top right corner, click \"Add\" to create a user called \"David Ford\" with username \"dford\" and password \"dford123!\": In the top right corner, click \"Add\" to create a user called \"Robert Young\" with username \"ryoung\" and password \"ryoung123!\": Your list of users should now look like this: Click on the vertical ellipsis (⋮) button to the right of user \"dford\" to show a contextual action menu, then click \"Manage role\". From the list of available roles, select \"Machine contributor\" then click the + sign to add the role to the current user. This role is required to register new unattended machines in Wayk Bastion, so you may want to perform the same operation for user \"ryoung\". In a regular deployment, we would need to add a valid Wayk Now license in Wayk Bastion and assign it to users who want to make client connections. However, if you deploy Wayk Bastion using a free cloudflare Argo tunnel (limited to *.trycloudflare.com URLs), a special demo mode is activated where Wayk Bastion simulates having a site license configured. This means you can follow this guide without requesting a Wayk Now trial license. You are now ready to try connecting Wayk Now to your Wayk Bastion with your test users. Step 5: Configure a Windows machine for unattended access For the purpose of this guide, this machine will be called \"DFORD-PC\". On a Windows machine, install Wayk Now using the .msi installer. You can use the Wayk Now online help as reference. Once installed, launch Wayk Now, then click File → Options from the menu of the main window. Click \"Unlock\" at the bottom left of the Options window to elevate permissions and allow modifications to settings affecting the Wayk Now unattended service. In the \"Connectivity\" section, change the \"Wayk Bastion Server Url\" value to your Wayk Bastion external URL ( https://wayk-den-demo-test.trycloudflare.com ) and click OK to apply the changes. The Wayk Now main window status bar should show a red circle for a few seconds, then it should go back to green when it has connected to the new Wayk Bastion. Go back to the \"Connectivity\" section of the Options window and unlock it again. Under \"Wayk Now User\", you should now see a \"Log in\" link. Click \"Log in\" to open the Wayk Bastion login page with the default system browser. Enter \"dford\" as the username and \"dford123!\" as the password, then click Continue. You should now see a login success page: Close the browser and come back to the Wayk Now Options window. It should now show the user \"dford\" as logged in to Wayk Bastion: Last but not least, click \"Register\" to register the machine for unattended access. To verify that the machine was correctly registered, go back to the Wayk Bastion Web UI and go in the \"Machines\" section. Your machine should now be listed: Step 6: Connect to the Windows machine using a Wayk Now client On another machine, install Wayk Now, and follow the instructions of the previous step for the Wayk Bastion configuration, with the exception of the unattended machine registration which is not required. When logging in, use \"ryoung\" as the username and \"ryoung123!\" as the password. For the purpose of this guide, this machine will be called \"RYOUNG-PC\". At this point, you should be able to see both machines connected to the Wayk Bastion in the \"Connections\" section: Each machine is shown as connected twice, because the unattended service and the Wayk Now client make separate connections to the Wayk Bastion. From the connection list, we can see that the target ID of \"DFORD-PC\" is \"430515\". This target ID is also shown in the Wayk Now main window on DFORD-PC in the \"Source ID\" field. On RYOUNG-PC, launch Wayk Now, type \"430515\" in the \"Target ID\" field and click \"Connect\": At the login prompt, select \"Secure Remote Delegation (SRD)\" and enter a valid system username + password for the target machine (\"DFORD-PC\"). Once connected, you should now be able to see your active session in the \"Sessions\" section of the Wayk Bastion Web UI: This list contains both current and past sessions for monitoring and auditing purposes."
  },
  "wayk/bastion/getting-started-azure.html": {
    "href": "wayk/bastion/getting-started-azure.html",
    "title": "Getting Started Guide (Azure VM) | docs.devolutions.net",
    "keywords": "Getting Started Guide (Azure VM) This getting started guide provides instructions for setting up Wayk Bastion on a Windows Server 2019 Core + Containers virtual machine instance in Azure. This guide can also be followed for installation on a regular Windows Server 2019 Core virtual machine outside of Azure with minimal adjustments. We will be deploying Wayk Bastion on an Azure VM for a fictional company called BuzzWord Marketing, with a real domain name (den.buzzword.marketing). Step 1: Create Azure VM In the Azure Marketplace, find the \"Windows Server\" virtual machine resource, select \"Windows Server 2019 Datacenter Server Core with Containers\" then click \"Create\": Select a workload environment based on your needs, the click \"Continue to create a VM\". For the purpose of this guide, I selected the recommended defaults for development and testing. Create a resource group for the VM (BuzzWordMarketing) and name the resource BuzzWordServer. Fill the form for the Administrator account, we will be using it to access the virtual machine with RDP. Last but not least, select all inbound ports (HTTP (80), HTTPS (443), SSH (22), RDP(3389)). Click \"Next: Disks\" to continue. Keep the default disk configuration, then click \"Next: Networking\". Keep the default networking configuration, then click \"Next: Management\". To control costs on a test virtual machine, disable boot diagnostics and enable auto-shutdown. Skip the \"Advanced\" and \"Tags\" sections to go to the final \"Review + Create\" section. Review the virtual machine configuration, then click \"Create\". Wait for a few minutes until the virtual machine creation is completed. Once completed, click on the virtual machine resource. Click on the \"Connect\" button in the menu bar on top of the screen to show connection options. Copy the virtual machine IP address (40.121.21.221) to the clipboard and keep it for later. Download the .rdp file and open it with an RDP client. Use the previously configured administrator account to connect to the virtual machine. If all worked well, you should see a Windows command prompt inside an empty desktop, a good sign that you’ve successfully connected to a Windows Server core virtual machine that doesn’t have Desktop Experience installed. Type \"start powershell\" to open a blue PowerShell prompt instead of the default black Windows command prompt. Step 2: Configure DNS Now that the virtual machine is up and running, we will create a DNS record pointing to it. For this guide, we bought the domain buzzword.marketing from namecheap , created a corresponding Azure DNS zone , then configured namecheap with custom DNS name servers from Azure . It is recommended to expose Wayk Bastion on a \"den\" subdomain, so we will create a DNS A record with \"den\" as the name and our public IP address (40.121.21.221) as value. Click OK, then wait for the DNS configuration to propagate, until den.buzzword.marketing can be resolved. Step 3: Launch Wayk Bastion Go back to the RDP client connected to the Azure VM and the PowerShell prompt. Make sure that the docker service is running: > Get-Service | Where-Object { $_.Name -Like 'docker' } > Start-Service -Name docker Install the WaykBastion module: > Install-Module -Name WaykBastion -Force Import the WaykBastion module: > Import-Module -Name WaykBastion Create a new Wayk Bastion configuration and then import a valid TLS certificate. For testing, I have obtained a free certificate from letsencrypt using Posh-ACME and the Azure DNS plugin . > New-WaykBastionConfig -Realm buzzword.marketing -ExternalUrl 'https://den.buzzword.marketing' -ListenerUrl 'https://localhost:443' > Import-WaykDenCertificate -CertificateFile .\\fullchain.pfx -Password 'poshacme' Alternatively, you can skip the TLS certificate configuration and expose Wayk Bastion in HTTP (never do this in production): > New-WaykBastionConfig -Realm buzzword.marketing -ExternalUrl 'http://den.buzzword.marketing' -ListenerUrl 'http://localhost:80' Finally, start Wayk Bastion: > Start-WaykBastion -Verbose The first launch will pull all docker images based on Windows Server Core, which can take a while because of their large size. Once started, you should be able to open https://den.buzzword.marketing in your browser. From there, you can follow the getting started guide (Argo tunnel) starting from Step 4: Complete initial configuration from Wayk Bastion Web UI."
  },
  "wayk/bastion/iis-deployment.html": {
    "href": "wayk/bastion/iis-deployment.html",
    "title": "IIS Deployment | docs.devolutions.net",
    "keywords": "IIS Deployment Deploying Wayk Bastion behind IIS is possible with the URL Rewrite and Application Request Routing (ARR) modules. IIS is not necessarily the recommended deployment option for Wayk Bastion ( traefik , nginx and haproxy are worthy alternatives). However, if you are comfortable with IIS or if you need it to deploy additional applications that require IIS within the same server, then it should be a good choice. IIS Feature Installation Open a PowerShell prompt and install the base IIS features required (IIS server + WebSocket support + management tools) $Features = @( 'Web-Server', 'Web-WebSockets', 'Web-Mgmt-Tools') foreach ($Feature in $Features) { Install-WindowsFeature -Name $Feature } You can install additional features, but the most important not to forget is the WebSocket protocol support: As for the IIS graphical management tools, they are recommended but not required, and they are absent from Windows Server Core. IIS Module Installation The two IIS modules we need (URL Rewrite and Application Request Routing) are not available as IIS features, and need to be installed using the Web Platform Installer . Once you have the Web Platform Installer, install (in order) the URL Rewrite and the Application Request Routing modules: IIS URL Rewrite Module IIS Application Request Routing Module Alternatively, you can install the modules using chocolatey : choco install urlrewrite -y choco install iis-arr -y However, the IIS URL Rewrite and Application Request Routing (ARR) modules are difficult to install automatically, so results may vary. The GUI installation is the most guaranteed to work. IIS Global Configuration By default, IIS does not preserve the HTTP Host header when proxying requests, which breaks Wayk Bastion. The preserveHostHeader setting in the system.webServer/proxy section of the configuration needs to be set to true : Alternatively, the same modification can be done at the command line: %windir%\\system32\\inetsrv\\appcmd.exe set config -section:system.webServer/proxy -preserveHostHeader:true /commit:apphost IIS Site Configuration In IIS manager, right-click \"Sites\" and select \"Add Website..\" In the \"Add Website\" dialog, enter a site name, physical path and host name. Make sure that the host name you choose is the final one you expect to use with https and matches your certificate name. As for the physical path on disk, it is not going to be used, but IIS requires you to have one. I have created \"C:\\inetpub\\denroot\", but you can use any path you want. Click OK to create the new website, then select it from the list of sites on the left. With the correct site selected on the left, find the \"URL Rewrite\" feature and double-click to open it: Under \"Actions\" at the top right, click \"Add Rule(s)…\". In the \"Add Rule(s)\" dialog, select \"Reverse Proxy\" and then click OK. While creating the new reverse proxy rule, you will likely be asked to enable proxy functionality (Application Request Routing). Click OK to enable it: You should now see a single rule called \"ReverseProxyInboundRule1\" in the list. Double-click on it to open the \"Edit Inbound Rule\" view. In the \"Match URL\" section, leave the \"(.*)\" default pattern value. Go to the \"Conditions\" section and then click \"Add…\" to create a new condition: The final result should look like this: With this URL Rewrite inbound rule, we can now properly rewrite https:// and wss:// URLs to localhost http:// and ws:// URLs. This is important, as failing to correctly rewrite the WebSocket URLs will break WebSocket connectivity, which is required. While obtaining a proper server certificate is outside of the scope of this guide, you still need to import it in IIS before configuring an HTTPS site binding for your site. Locate the \"Server Certificates\" feature and double-click on it to open it: At the top right, under \"Actions\", click \"Import…\". In the \"Import Certificate\" dialog, select your certificate in .pfx file, enter the password and then click OK. You can now create a new HTTPS site binding. Under \"Sites\", right-click your site ( den.buzzword.marketing in this case) and then select \"Edit Bindings…\": In the \"Site Bindings\" dialog, click \"Add…\": Select \"https\" as the binding type, and enter your IIS site host name. Check \"Require Server Name Indication\" and \"Disable HTTP/2\". Click \"Select…\", then select the server certificate that was previously imported. Click OK to create the new site binding. That’s it! Your IIS site is now ready. Review your Wayk Bastion configuration ListenerUrl and ExternalUrl parameters to make sure they correspond to your current configuration: Set-WaykDenConfig -ListenerUrl 'http://localhost:4000' -ExternalUrl 'https://den.buzzword.marketing' Then start Wayk Bastion, and you should now be able to access it through your IIS site. If it doesn’t work the first time, try running iisreset once to force the configuration changes made earlier."
  },
  "wayk/bastion/index.html": {
    "href": "wayk/bastion/index.html",
    "title": "Wayk Bastion Overview | docs.devolutions.net",
    "keywords": "Wayk Bastion Overview Warning We are in the process of rebranding Wayk Den to Wayk Bastion, so some of the documentation may be outdated. If you are upgrading from Wayk Den to Wayk Bastion, please follow the steps from the migration guide . WaykBastion-ps is a PowerShell cmdlet for Wayk Bastion, the centralized server for Devolutions Wayk Now . For assistance or feature requests, please use the Wayk forums or open a ticket on this github project. Make sure you have all software prerequisites then read one of our getting started guides: getting started guide (Argo tunnel) getting started guide (Azure VM) . getting started guide (ACME/letsencrypt) . Devolutions Gateway getting started guide . IIS deployment guide . Once you have been familiarized with Wayk Bastion, come back to this page for more details on specific aspects of the software. Installation PowerShell On Windows, the regular PowerShell already installed can be used. On macOS and Linux, you will need PowerShell 7 . To launch a PowerShell 7 terminal, use the pwsh command. PowerShell module A powershell module is available to configure and manage the Wayk Bastion server. It is available on PSGallery or it could be built directly from source code . We recommend to install the latest version available on PSGallery, but if needed, a section describe how to build it if you need it. Installation from PSGallery The Wayk Bastion PowerShell module is available on PSGallery . Install-Module -Name WaykBastion -AllowPrerelease Import-Module WaykBastion If you encounter issues with the Install-Module command, you may have to install or update PowerShellGet . You can then list all commands exported from the WaykBastion module: Get-Command -Module WaykBastion When a new version comes out, you can update the cmdlet and restart Wayk Bastion to upgrade. The updated cmdlet will point to newer versions of the docker containers used in Wayk Bastion, so upgrading is a simple matter of restarting Wayk Bastion: Update-Module -Name WaykBastion Import-Module WaykBastion Restart-WaykBastion Installation from Source If you have installed the module from PSGallery, this section is not useful for you. You can jump to the next section. To build the cmdlet, you will need the .NET SDK . From PowerShell, run the build.ps1 script, and then load the resulting PowerShell module: .\\build.ps1 Import-Module \"./WaykBastion\" -Force Docker Docker Installation Deployment Before jumping in to the configuration, let’s review the different deployment options. Layer 4 deployment: Expose services externally through TCP (layer 4) and handle HTTPS inside Wayk Bastion. Layer 7 deployment: Expose services externally through a layer 7 reverse proxy (HTTPS) that offloads TLS from Wayk Bastion. Wayk Bastion Jet Relay Configuration All Wayk Bastion commands accept a -ConfigPath parameter to point to a directory where various configuration files are kept. If this parameter is not specified, the current working directory is used by default. The first step is to create a Wayk Bastion configuration file with mandatory parameters using the New-WaykBastionConfig command. You need to choose a realm for your Wayk Bastion, such as \"contoso.net\". This realm does not need to be a valid DNS domain name, but it will become your Wayk Bastion realm used in various places, including the peer-to-peer certificates generated by the Wayk Bastion built-in certificate authority. The second mandatory parameter is the external URL at which the Wayk Bastion will be exposed. We recommend using the \"den\" subdomain under the domain of your choice, such as \"den.contoso.net\". The protocol prefix ( http:// or https:// ) also needs to be included. Create a new Wayk Bastion configuration file, using \"contoso.net\" as realm and \"https://den.contoso.net\" as the external url: PS > New-WaykBastionConfig -Realm contoso.net -ExternalUrl https://den.contoso.net -ListenerUrl http://localhost:4000 The listener url is used to specify the listening protocol and port on the machine where Wayk Bastion is running. To listen in https, a certificate needs to be imported before changing the listener URL protocol. Initial Setup When accessing the Web UI for the first time, login using the default username (\"wayk-admin\") and password (\"wayk-admin\"): You will then be asked to create your first admin account to replace the default one: It should also be noted that you can access the Wayk Bastion Web UI locally through the configured listener URL ( http://localhost:4000 by default) for convenience, as an intermediate step before configuring the external URL. Certificate configuration To expose Wayk Bastion to the external world, you will need a TLS certificate from a trusted certificate authority such as Let's Encrypt . Wayk Now will validate certificates in the same way as a browser does for a website. If you wish to make your own certificate authority, the Root CA certificate will need to be installed in each machine’s certificate trust store. If the system browser can validate it, Wayk Now should be able to validate it as well, it’s just a lot more work. Before going any further, check the following points: The certificate name matches your configured external URL. This means that if your external URL is \"https://den.contoso.com\" then your certificate name should be \"den.contoso.com\" or \"*.contoso.com\" if you have a wildcard certificate. The certificate is either in pem + key or pfx (PKCS#12) format. The private key password is only supported for the pfx format. The certificate file contains the certificate chain excluding the Root CA. This means that in most cases, you should have a leaf certificate, followed by one or more intermediate certificates. If validation works in a browser but not in Wayk Now, the intermediate certificate is likely missing. The PEM format is the simplest to work with, since it is the Base64 representation of the DER-encoded certificate in between \"-----BEGIN CERTIFICATE-----\" and \"-----END CERTIFICATE-----\" tags. To add the intermediate certificate to the certificate file, just append it after your leaf certificate in a text editor. PS > Import-WaykBastionCertificate -CertificateFile /path/to/certificate.pem -PrivateKeyFile /path/to/private_key.key PS > Import-WaykBastionCertificate -CertificateFile /path/to/certificate.pfx -Password <password> Running Start Wayk Bastion, and wait for all containers to start: PS > Start-WaykBastion Once started, Wayk Bastion listens on http://localhost:4000 by default. Alternatively, if you want to see the complete docker commands executed by the \"Start-WaykBastion\" command, you can use the -Verbose parameter: PS > Start-WaykBastion -Verbose You can check that all containers are up and running with the docker ps -f network=den-network command. To confirm everything is correctly configured, you should be able to get a response from the Wayk Bastion well known configuration endpoint: curl http://localhost:4000/.well-known/configuration {\"den_router_uri\":\"https://den.contoso.net/cow\",\"lucid_uri\":\"https://den.contoso.net/lucid\",\"realm\":\"contoso.net\",\"wayk_client_id\":\"zqdvSbCRWdDrj1fQXwzPQbCg\"} If you have correctly configured external access, you should be able to get the same response using the external configuration URL ( https://den.contoso.net/.well-known/configuration ). Stop Wayk Bastion, and wait for all containers to stop: PS > Stop-WaykBastion System Service It is possible to register a system service on Windows to automatically call Start-WaykBastion / Stop-WaykBastion in a given config directory. Instead of using a local user directory for the configuration files, the service should be installed in a global directory with restricted permissions like this: PS > $ConfigPath = Get-WaykBastionPath ConfigPath PS > $ConfigPath C:\\ProgramData\\Devolutions\\Wayk Den PS > New-Item -Path $ConfigPath -Type Directory -Force The \"Get-WaykBastionPath ConfigPath\" command returns the recommended directory for the current platform where files should be stored. If you already have a directory with your Wayk Bastion configuration files, you should move them to the new location. You can then proceed with the service registration: PS > Set-Location $ConfigPath PS > Register-WaykBastionService -ServicePath $ConfigPath \"WaykBastion\" service has been installed to \"C:\\ProgramData\\Devolutions\\Wayk Den\" PS > Get-Service WaykBastion Status Name DisplayName ------ ---- ----------- Stopped WaykBastion Wayk Den PS > Start-Service WaykBastion Wait for the service to start, this can take some time. If you look at the files in the directory, you should see \"WaykBastion.exe\", which is the service executable, and \"WaykBastion.log\", the service log file: PS > Get-ChildItem Directory: C:\\ProgramData\\Devolutions\\Wayk Bastion Mode LastWriteTime Length Name ---- ------------- ------ ---- d----- 4/2/2020 5:21 PM den-server d----- 4/2/2020 5:06 PM traefik -a---- 4/7/2020 4:34 PM 314 service.json -a---- 4/2/2020 5:06 PM 909 wayk-den.yml -a---- 4/2/2020 5:33 PM 770048 WaykBastion.exe -a---- 4/7/2020 4:07 PM 2753 WaykBastion.log If you encounter issues with Wayk Bastion not working as expected when launched through the system service, the best way to debug the issue is to go in the same directory as the service and run the \"Start-WaykBastion\" command manually to see what happens. The system service is a wrapper over the cmdlet. If you need to remove it, you can call the Unregister-WaykBastionService function: PS > Unregister-WaykBastionService -ServicePath $ConfigPath You can also update the service wrapper executable when never versions of the cmdlet are published by calling Register-WaykBastionService again."
  },
  "wayk/bastion/license-management.html": {
    "href": "wayk/bastion/license-management.html",
    "title": "License Management | docs.devolutions.net",
    "keywords": "License Management Adding a license From the Wayk Bastion menu, click Licenses : On the top right, click the '+' button to add a license: Enter your license key (XXXXX-XXXXX-XXXXX-XXXXX-XXXXX), then click OK to add the license. Your license should now be listed with its details, such as the license type and expiration. Assigning a license Each Wayk Client user needs an assigned license. For instance, if you have a Wayk Client license valid for 10 users, you will need to assign the license to each of them individually. If you have one of the unlimited user licenses (site, country or global), then all users are automatically licensed and no manual license assignment is necessary. From the Wayk Bastion menu, click Users , then All Users : Click on the vertical ellipsis (⋮) besides a user, and then click \"Manage license\": From the list, select a license to assign to the user and then click OK. This user should now be licensed for Wayk Client usage."
  },
  "wayk/bastion/migration-guide.html": {
    "href": "wayk/bastion/migration-guide.html",
    "title": "Migration Guide | docs.devolutions.net",
    "keywords": "Migration Guide Wayk Den to Wayk Bastion (2020.3.0) Open a new PowerShell terminal, import the WaykDen module and move to the configuration directory: Import-Module -Name WaykDen Set-Location \"$Env:ProgramData\\Devolutions\\Wayk Den\" If the WaykDen service was previously created with the Register-WaykDenService command, it needs to be stopped and removed: Stop-Service WaykDen Unregister-WaykDenService Verify that docker ps shows no running containers, then close the current PowerShell terminal, and open a new one in which the WaykDen module is not loaded. Uninstall the WaykDen module, then install the WaykBastion module to replace it: Uninstall-Module -Name WaykDen -AllVersions Install-Module -Name WaykBastion -AllowClobber Confirm that the WaykBastion module is installed, and that old versions of the WaykDen module were correctly uninstalled: PS > Get-InstalledModule Wayk* | Select-Object Name, Version Name Version ---- ------- WaykBastion 2020.3.0 Rename the \"Wayk Den\" directory to \"Wayk Bastion\": Set-Location \"$Env:ProgramData\\Devolutions\" PS C:\\ProgramData\\Devolutions> Move-Item \".\\Wayk Den\" \".\\Wayk Bastion\" Move to the \"Wayk Bastion\" configuration directory, then try launching Wayk Bastion at least once: Set-Location \"$Env:ProgramData\\Devolutions\\Wayk Bastion\" Import-Module -Name WaykBastion Start-WaykBastion -Verbose If you haven't updated Wayk Bastion for some time, the Start-WaykBastion may take a few minutes to complete as it pulls the new containers. The WaykBastion service can now be registered with the Register-WayBastionService again (optional): PS C:\\ProgramData\\Devolutions\\Wayk Bastion> Register-WaykBastionService \"WaykBastion\" service has been installed to \"C:\\ProgramData\\Devolutions\\Wayk Bastion\" PS > Start-Service WaykBastion The name WaykDen has been renamed to WaykBastion in all commands, but aliases are provided for compatibility. Run Get-Command -Module WaykBastion to see a complete list of commands and aliases exported by the new PowerShell module. That's it, the migration from Wayk Den to Wayk Bastion is now complete. If you encounter any issues during the migration, please do not hesitate to contact our support ."
  },
  "wayk/bastion/mongodb-installation.html": {
    "href": "wayk/bastion/mongodb-installation.html",
    "title": "MongoDB Installation | docs.devolutions.net",
    "keywords": "MongoDB Installation By default, the Wayk Bastion PowerShell module creates MongoDB container and a Docker volume to store its data. While this may be good enough for most, a regular MongoDB installation is preferable, especially if high availability is required. MongoDB Server Download the MongoDB .msi installer for Windows . Launch the .msi installer, then click Next. Accept the license agreement, then click Next. Leave the default options, then click Next. If you wish to install MongoDB Compass, check \"Install MongoDB Compass\", then click Next. While it is a very convenient MongoDB GUI, it can take several minutes to install. Click Install to begin the installation. Wait for the installation to complete. If you selected MongoDB Compass, it will take a few minutes, so be patient. Click Finish to complete the installation. That's it, you should now have a \"MongoDB\" system service started automatically, with files stored under \"C:\\Program Files\\MongoDB\\Server\\4.4\\bin\". Network Configuration Once the MongoDB server is installed, a few configuration settings need to be tweaked to make it usable from the containers. Open the mongod.cfg configuration file located inside the 'bin' directory of the MongoDB server with a text editor, then look for the following section : # network interfaces net: port: 27017 bindIp: 127.0.0.1 Change 'bindIp: 127.0.0.1' to 'bindIpAll: true', then save the changes: # network interfaces net: port: 27017 bindIpAll: true Restart the MongoDB service for the changes to be applied: Restart-Service MongoDB This change is necessary because Windows container use a special network interface to communicate with the host. MongoDB tools In order to perform MongoDB management on the host, you will need to install the MongoDB management tools . chocolatey You can install the MongoDB database tools with chocolatey: choco install mongodb-database-tools This is the recommended installation method, as it automatically adds to the tools to the system PATH. .msi installer Download the .msi installer or equivalent package for your platform: Once installed, the tools should be located in directory that looks like \"C:\\Program Files\\MongoDB\\Tools\\100\\bin\". You will need to add it to your system PATH before invoking the tools. Migrating to an external database If you have been using the internal database automatically created as a Windows container, follow these steps to migrate your data and switch to the new MongoDB database server. Enter-WaykBastion -ChangeDirectory Stop-WaykBastion $BackupFile = \"bastion-backup-$(Get-Date -Format 'FileDateUniversal').tgz\" Backup-WaykBastionData -BackupPath \".\\${BackupFile}\" Make sure that the backup file was correctly created: PS > Get-Item $BackupFile Directory: C:\\ProgramData\\Devolutions\\Wayk Bastion Mode LastWriteTime Length Name ---- ------------- ------ ---- -a---- 11/6/2020 12:54 PM 40254 bastion-backup-20201106Z.tgz Then make sure that the 'mongorestore' command is available on the host: PS > [bool]$(Get-Command mongorestore) True If the command cannot be found, install the MongoDB database tools and modify your system PATH environment variable to include them. We are now ready to try restoring the database contents into the new MongoDB database server running on the host. Make sure that the MongoDB system service is up and running: PS > Get-Service MongoDB Status Name DisplayName ------ ---- ----------- Running MongoDB MongoDB Server (MongoDB) Run the 'mongorestore' command using the previous backup file, and the destination MongoDB server: mongorestore --drop --gzip --archive=$BackupFile --uri mongodb://localhost:27017 While 'localhost' works on the host, it won't work inside containers: instead, you need to use the explicit host name or IP address of the MongoDB host. We will use the hostname 'MongoHost' but it needs to be replaced by the real name of your host to work within Wayk Bastion containers: $MongoHost = \"MongoHost\" Stop-WaykBastion Set-WaykBastionConfig -MongoExternal $True -MongoUrl \"mongodb://${MongoHost}:27017\" Start-WaykBastion If the 'den-mongo' container was not stopped prior to the configuration change, it may still be running. You can stop it with \"docker stop den-mongo\" if it is the case. If everything worked well, all containers expect 'den-mongo' should be up and running. If some containers failed to started due to MongoDB connection errors, verify the following: The MongoUrl parameter points to a reachable host where the MongoDB server is running The MongoDB server configuration file (mongod.cfg) was modified with 'bindIpAll: true' The firewall is not blocking connections on TCP/27017 in between containers and the host Otherwise, congratulations: Wayk Bastion is now correctly configured to use an external MongoDB server!"
  },
  "wayk/bastion/user-management.html": {
    "href": "wayk/bastion/user-management.html",
    "title": "User Management | docs.devolutions.net",
    "keywords": "User Management Users using Wayk Now client can log in to be authenticated with Wayk Bastion server. The server, by default, will provide a Wayk Bastion ID to any user who wants to connect to it. To authenticate user, Wayk Bastion can be configured to use a specific user group through LDAP integration. Two options are supported: Active Directory and JumpCloud. In order to fetch user and group information, a user with read-only LDAP access must first be created. Active Directory To integrate Active Directory, here is a list of the required parameters: LdapServerUrl: ldap:// ldap-server LdapUsername, LdapPassword LdapUserGroup It is important to specify the server IP since there is not DNS resolution in the docker container. The user used should be a user with only read-only access. A section below explains how to create a such user. Finally, the user group is not mandatory. If it is not specified, all users will be accepted. If it is specified, only users from that group will be able to be authenticated. The following command will set LDAP property value for active directory. Set-WaykDenConfig -LdapServerType ActiveDirectory -LdapUsername ldap-user@contoso.local -LdapPassword ldap-password -LdapServerUrl ldap://ldap-server -LdapUserGroup 'Domain Users' User creation with read-only access By default, a new user created in active directory has read-only access on the LDAP server. But that user is also member of the group Domain Users by default. Being member of that group is enough to be able to use that user and log on any domain’s computer. To avoid that, we suggest to use a user who is not a member of Domain Users group and has only read-only access on the LDAP server. To do that, a few steps is needed. First, a new group has to be created, let’s say \"Read-only Users\". Then a new user can be created and added only to that group. After that, the new group can be set as primary group for the user. And finally, the user can be removed from the Domain Users group. This user should be used to configured WaykDen Server. JumpCloud JumpCloud is a cloud service who help you to centralize user management. You can create users and groups then use the service call \"LDAP-as-a-Service\" to access those users and groups from WaykDen. You can read more on how to use JumpCloud’s LDAP-as-a-Service . To integrate Jump Cloud with Wayk Bastion, here is a list of the required parameters: LdapServerUrl (ldaps://ldap.jumpcloud.com:636) LdapUsername, LdapPassword LdapBaseDn: Distinguished Name to retrieve users and groups LdapUserGroup (optional) The LDAP server url should be set to ldaps://ldap.jumpcloud.com:636. JumpCloud provide a non secure access as well, but we don’t recommend it. A user who can read the ldap directory should be created following steps here . The username has to be provided with the Distinguished Name (DN), something like uid=_LDAP_BINDING_USER_,ou=Users,o=_YOUR_ORG_ID_,dc=jumpcloud,dc=com . The base DN is similar and should be set to ou=Users,o=_YOUR_ORG_ID_,dc=jumpcloud,dc=com . Finally, a user group name can be specified to limit user to that group. The following command will set LDAP property value for JumpCloud. Set-WaykDenConfig -LdapServerType JumpCloud -LdapUsername \"uid=ldap-user,ou=Users,o=YOUR_ORG_ID,dc=jumpcloud,dc=com\" -LdapPassword ldap-password -LdapServerUrl ldaps://ldap.jumpcloud.com:636 -LdapBaseDn \"ou=Users,o=YOUR_ORG_ID,dc=jumpcloud,dc=com -LdapUserGroup wayk-users\""
  },
  "wayk/client/index.html": {
    "href": "wayk/client/index.html",
    "title": "Wayk Client Overview | docs.devolutions.net",
    "keywords": "Wayk Client Overview Wayk Client is the program used by technicians to establish remote desktop connections to machines managed by Wayk Bastion. Wayk Agent needs to be installed on the target machine and connected to the same Wayk Bastion. Wayk Client requires a user license that can be assigned to individual technicians in Wayk Bastion."
  },
  "wayk/client/licensing.html": {
    "href": "wayk/client/licensing.html",
    "title": "Wayk Client Licensing | docs.devolutions.net",
    "keywords": "Wayk Client Licensing Wayk Client requires a license to make remote desktop connections to machines managed by Wayk Bastion. Centralized Management Wayk Client licensing is centrally managed in Wayk Bastion, saving the trouble of sharing license keys with everyone (and losing track of them!). Instead, follow these three steps: Add Wayk Client licenses in Wayk Bastion Assign Wayk Client licenses to individual users Login in to Wayk Bastion from Wayk Client with a licensed user Refer to Wayk Bastion license management to learn how to add licenses and assign them to individual users, then follow the steps for the Wayk Client user login . Client-side Management Wayk Client licenses can be configured client-side in the following exception cases: Wayk Client is used without Wayk Bastion (not recommended) Wayk Client is used with the public Wayk Bastion (den.wayk.net) To add the Wayk Client license, go to Help -> Register Product : Enter your Wayk Client license, then click \"Apply\":"
  },
  "wayk/client/requirements.html": {
    "href": "wayk/client/requirements.html",
    "title": "Wayk Client Requirements | docs.devolutions.net",
    "keywords": "Wayk Client Requirements System Requirements Windows 7, 8, 8.1, 10 Windows Server 2012, 2016, 2019 macOS Mavericks (10.9) or later Ubuntu Linux 16.04 or later 1 GHz processor 512 MB RAM 1024x768 screen resolution 25 MB storage capacity"
  },
  "wayk/client/user-login.html": {
    "href": "wayk/client/user-login.html",
    "title": "Wayk Client User Login | docs.devolutions.net",
    "keywords": "Wayk Client User Login From the main menu, click File -> Options , then select the Connectivity tab. Enter your Wayk Bastion URL ( https://den.buzzword.marketing ). Under \"Wayk Bastion User\", click \"Login\": The default system browser will open the Wayk Bastion login window. An authentication progress dialog is shown for the duration of the browser login: In the browser login window, enter your Wayk Bastion username and password, then click \"Continue\": Once successfully logged in, the Connectivity tab should now show the username of the currently logged in user: To change users, click Log out and then repeat the process."
  },
  "wayk/index.html": {
    "href": "wayk/index.html",
    "title": "Wayk Bastion | docs.devolutions.net",
    "keywords": "Wayk Bastion Remote Access Management for Managed Service Providers Instant Remote Access for Zero Trust Networks Take control without losing it: Wayk Bastion makes remote access to all machines on all networks manageable. Start Trial Now Built for Zero-Trust Security, No VPN Required! ✓ Remote Machine Management on Separate Networks ✓ Unattended Remote Desktop Access for All Platforms ✓ Centralized Dashboard with Role-Based Access Control ✓ Audit Trails for Remote Access Session Tracking ✓ Active Directory Integration for User Management ✓ Made for Managed Service Providers Managed Service Providers (MSPs) have to manage servers for their customers in addition to supporting users when they have an issue with their computer. The Wayk Bastion centralized, uniform approach to remote access management provides the critical response time needed when it has to work instantly. What is Wayk Bastion? Wayk Bastion is a self-hosted remote access management server for machines running Wayk Agent. All remote desktop connections made by technicians using Wayk Client are authorized and monitored with corresponding session audit trails. Allowing remote access is one thing, but keep track of who accessed what, when and for how long is just as important for security. Zero Trust Security Freedom Devolutions Gateway relay servers configured with Wayk Bastion ensure independence from third-party cloud services while providing greater control on data traffic. Both Wayk Agent and Wayk Client use outbound connectivity to Wayk Bastion, such that no VPN or inbound traffic firewall exception is required. The Wayk Bastion zero trust approach to security simplifies remote access because the network location no longer matters. Features and Highlights Self-Hosted Maximize security by deploying Wayk Bastion in an environment that you control, either on-premises or in the cloud. Traffic Relay Control Keep absolute control over peer-to-peer traffic with private Devolutions Gateway relay servers. Deployment Automation Deploy Wayk Agent automatically on a large number of machines with registration to Wayk Bastion. Container Security Benefit from the security of container isolation on Windows and Linux. Access Management Centralize the management of all your machines in Wayk Bastion and access them easily with Wayk Client. Unattended Access Register machines for unattended access and connect to them at any time without user intervention. Centralized Dashboard Manage all of your machines from a centralized dashboard that puts you in the control seat. Web Client Choose between the web client and the native application when launching remote sessions from the browser. User Management Control user permissions with a powerful role-based access control (RBAC) system. Role-Based Access Control Apply granular control over resources through role assignments on users and groups. User Management by Groups Simplify role assignments for a large number of users by organizing them into groups. Active Directory Integration: Map to your existing users through LDAP integration with Active Directory. Audit Trails Keep track of who is using which sessions in real time or inspect detailed activity audit trails. Session Activity Tracking Inspect a session history for information such as session time, session duration, client and server information. Live Session Status Never be in the unknown, in Wayk Bastion you will always be aware if someone is accessing a machine in real time. Who, What, When? See who connected to which machine, and when. Remote Support Provide remote assistance to end users efficiently with Wayk Client and the right feature set. File Transfer & Clipboard Sharing Seamlessly send and receive files as well as copied clipboard data between all your machines. Built-in Chat Improve communication between you and the end user with a convenient built-in chat window. Session Recording Record remote desktop sessions as video files to be reviewed later. Enterprise Ready Connect without effort to machines on all platforms with the highest level of security. Cross-Platform Manage machines running Windows, macOS and Linux from all platforms, including Android and iOS. Concurrent Sessions Easily manage multiple remote connections simultaneously while quickly navigating between them. Certificate Authority Secure access with strong TLS 1.2 encryption backed by a built-in certificate authority. Wayk Client Wayk Client is used by technicians to establish remote desktop connections to machines managed by Wayk Bastion. Wayk Agent needs to be installed on the target machine and connected to the same Wayk Bastion. Download Now Wayk Agent Wayk Agent is installed on all machines managed by Wayk Bastion. The system service from Wayk Agent reports its state to Wayk Bastion and exposes remote desktop connectivity to technicians using Wayk Client. Wayk Agent deployment can be automated at large scale with machine registration to Wayk Bastion. Download Now Wayk Licensing Wayk Client requires a license to make remote desktop connections to machines managed by Wayk Bastion. Each user is assigned a license individually, such that 10 Wayk Client licenses are needed for 10 technicians. While licenses can be reassigned as needed, they are not considered \"floating\" or \"concurrent\" as seen elsewhere. Wayk Client users automatically unlock all advanced features, including unlimited concurrent sessions. For a large number of technicians, unlimited user licensing is the recommended option. As for Wayk Agent, it does not require a license, regardless of the number of machines. For more information, please visit our store ."
  }
}